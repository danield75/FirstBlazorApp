@page "/weather"
@inject IConfiguration Configuration
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

<h4>Enter city</h4>
<input type="text" @bind="@City"/>
<button @onclick="GetWeatherForecast">Search</button>

@if (forecast == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Summary: @forecast.Description</p>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Maximum Temperature">Maximum Temp. (C)</th>
                <th aria-label="Minimum Temperature">Minimum Temp. (C)</th>
                <th aria-label="Current Temperature">Current Temp. (C)</th>
                <th aria-label="Pressure">Pressure (mb)</th>
                <th aria-label="Wind Direction">Wind Direction</th>
                <th aria-label="Wind Speed">Wind speed (kph)</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @if (forecast.Days != null)
            {
                @foreach (var day in forecast.Days)
                {
                    <tr>
                        <td>@day.DateTime.ToShortDateString()</td>
                        <td>@day.TempMax</td>
                        <td>@day.TempMin</td>
                        <td>@day.Temp</td>
                        <td>@day.Pressure</td>
                        <td>@day.WindDirectionDescription</td>
                        <td>@day.WindSpeed</td>
                        <td>@day.Description</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast? forecast;
    private string? _urlBase;
    private string? _urlPost;
    private string City = "Hasselt";

    protected override async Task OnInitializedAsync()
    {
        await GetWeatherForecast();
    }

    private async Task GetWeatherForecast()
    {
        _urlBase = Configuration.GetSection("WEATHER_API").GetValue<string>("URL_BASE");
        _urlPost = Configuration.GetSection("WEATHER_API").GetValue<string>("URL_POST");

        forecast = await Http.GetFromJsonAsync<WeatherForecast>(_urlBase + City + _urlPost);
    }

    public class WeatherForecast
    {
        public string? Description { get; set; }

        public Day[]? Days { get; set; }
    }

    public class Day
    {
        public DateTime DateTime { get; set; }

        public float TempMax { get; set; }

        public float TempMin { get; set; }

        public float Temp { get; set; }

        public float Pressure { get; set; }

        public float WindDir { get; set; }

        public string WindDirectionDescription => WindDir switch
         {
            > 0 and <= 22.5F => "N",
            > 337.5F and <= 360 => "N",
            > 292.5F and <= 337.5F => "NW",
            > 247.5F and <= 292.5F => "W",
            > 202.5F and <= 247.5F => "SW",
            > 157.5F and <= 202.5F => "S",
            > 112.5F and <= 157.5F => "S0",
            > 67.5F and <= 112.5F => "0",
            > 22.5F and <= 67.5F => "N0",
            _ => "-"
         };

        public float WindSpeed { get; set; }

        public string? Description { get; set; }
    }
}
